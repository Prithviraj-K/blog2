/** @jsx jsx */
import { SxProp } from '@theme-ui/core';
import { Theme } from '@theme-ui/css';
import { ComponentType, ReactNode, ComponentProps } from 'react';
declare const tags: readonly ["p", "b", "i", "a", "h1", "h2", "h3", "h4", "h5", "h6", "img", "pre", "code", "ol", "ul", "li", "blockquote", "hr", "em", "table", "tr", "th", "td", "em", "strong", "del", "inlineCode", "thematicBreak", "div", "root"];
export declare type ThemeUIMdxIntrinsics = typeof tags[number];
declare const aliases: {
    readonly inlineCode: "code";
    readonly thematicBreak: "hr";
    readonly root: "div";
};
export declare type MdxAliasesKeys = keyof typeof aliases;
declare type MDXProviderComponentsKnownKeys = {
    [key in ThemeUIMdxIntrinsics]?: ComponentType<any> | string;
};
export interface MDXProviderComponents extends MDXProviderComponentsKnownKeys {
    [key: string]: ComponentType<any> | string | undefined;
}
export declare type MdxAliases = {
    [key in ThemeUIMdxIntrinsics]: keyof JSX.IntrinsicElements;
};
export declare type ThemedProps = {
    theme: Theme;
};
export interface MdxProviderProps {
    components?: MDXProviderComponents;
    children: ReactNode;
}
declare type Aliases = typeof aliases;
/**
 * Extracts styles from `theme.styles` object
 */
export declare const themed: (key: ThemeUIMdxIntrinsics | (string & {})) => (theme: Theme) => import("@theme-ui/core").CSSObject;
export interface ThemedComponent<Name extends string> {
    (props: SxProp & (Name extends keyof JSX.IntrinsicElements ? ComponentProps<Name> : {})): JSX.Element;
    displayName: string;
}
export declare type ThemedComponentsDict = {
    [K in ThemeUIMdxIntrinsics]: K extends keyof Aliases ? ThemedComponent<Aliases[K]> : K extends keyof JSX.IntrinsicElements ? ThemedComponent<K> : never;
};
export declare const defaultMdxComponents: ThemedComponentsDict;
export declare const Themed: ThemedComponentsDict;
export {};
