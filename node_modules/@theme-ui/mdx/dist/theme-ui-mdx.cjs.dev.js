'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@theme-ui/core');
var css = require('@theme-ui/css');
var react = require('react');

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

// mdx components
var tags = ['p', 'b', 'i', 'a', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'img', 'pre', 'code', 'ol', 'ul', 'li', 'blockquote', 'hr', 'em', 'table', 'tr', 'th', 'td', 'em', 'strong', 'del', // mdx
'inlineCode', 'thematicBreak', // other
'div', // theme-ui
'root'];
var aliases = {
  inlineCode: 'code',
  thematicBreak: 'hr',
  root: 'div'
};

var isAlias = function isAlias(x) {
  return x in aliases;
};

var alias = function alias(n) {
  return isAlias(n) ? aliases[n] : n;
};
/**
 * Extracts styles from `theme.styles` object
 */


var themed = function themed(key) {
  return function (theme) {
    return css.css(css.get(theme, "styles." + key))(theme);
  };
};

var createThemedComponent = function createThemedComponent(name, variant) {
  var variantStyles = themed(variant);

  var component = function component(props) {
    var extraStyles = {};

    if (name === 'th' || name === 'td') {
      var _ref = props,
          align = _ref.align;
      if (align !== 'char') extraStyles.textAlign = align;
    }

    return core.jsx(name, _extends({}, props, {
      css: [props.css, variantStyles, extraStyles].filter(Boolean)
    }));
  };

  component.displayName = "Themed(" + name + ")";
  return component;
};

var defaultMdxComponents = {};
var Themed = {};
tags.forEach(function (tag) {
  var component = createThemedComponent(alias(tag), tag);
  defaultMdxComponents[tag] = component;
  Themed[tag] = component;
});

function wrapComponent(value, key) {
  var component = function component(props) {
    return core.jsx(value, _extends({}, props, {
      css: themed(key)
    }));
  };

  component.displayName = "MdxComponents('" + key + "')";
  return component;
}
/** @internal */


var wrapComponentsWithThemeStyles = function wrapComponentsWithThemeStyles(comps) {
  var next = _extends({}, defaultMdxComponents); // We enrich user's components with the styles from theme.styles.
  // Example: `components.p` will get the styles from `theme.styles.p` as className.


  for (var _i = 0, _Object$keys = Object.keys(comps); _i < _Object$keys.length; _i++) {
    var key = _Object$keys[_i];
    var value = comps[key];
    next[key] = typeof value === 'object' ? wrapComponentsWithThemeStyles(value) : wrapComponent(value, key);
  }

  return next;
};

/**
 * @example
 * import { MDXProvider, useMDXComponents } from '@mdx-js/react'
 *
 * function MyMdxProvider({ children }) {
 *   const components = useThemedStylesWithMdx(useMDXComponents())
 *
 *   return <MDXProvider components={components}>{children}</MDXProvider>
 * }
 */

function useThemedStylesWithMdx(outerComponents) {
  return react.useMemo(function () {
    return wrapComponentsWithThemeStyles(_extends({}, defaultMdxComponents, outerComponents));
  }, [outerComponents]);
}

exports.Themed = Themed;
exports.defaultMdxComponents = defaultMdxComponents;
exports.themed = themed;
exports.useThemedStylesWithMdx = useThemedStylesWithMdx;
