"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodeBinaryJSON = void 0;
const fs_1 = __importDefault(require("fs"));
const stream_1 = require("stream");
const chunkToScriptWriter_1 = __importDefault(require("./chunkToScriptWriter"));
var jsonxl_min_1 = require("./jsonxl.min");
Object.defineProperty(exports, "encodeBinaryJSON", { enumerable: true, get: function () { return jsonxl_min_1.encode; } });
const scriptsToInject = [
    {
        type: 'path',
        path: require.resolve('@discoveryjs/json-ext/dist/json-ext.min.js'),
    },
    {
        type: 'cjs',
        path: require.resolve('pako/dist/pako.es5.min.js'),
        name: 'Pako',
    },
    {
        type: 'cjs',
        path: require.resolve('./jsonxl.min'),
        name: 'JSONXL',
    },
];
class HTMLWriter {
    constructor(options) {
        this.stream = new stream_1.PassThrough();
        this.options = {
            ...options,
            jsonExtAPIName: options.jsonExtAPIName || 'jsonExtAPIName',
        };
        this.stream.setMaxListeners(100);
        this.chunkWriters = [];
    }
    getStream() {
        return this.stream;
    }
    async write() {
        writeHeader(this.stream, this.options);
        for (const writer of this.chunkWriters) {
            await (0, chunkToScriptWriter_1.default)(writer.stream, this.stream, writer.id);
        }
        writeFooter(this.stream, this.options);
        this.stream.end();
        return new Promise((resolve, reject) => {
            this.stream.once('finish', resolve);
            this.stream.once('error', reject);
        });
    }
    addChunkWriter(source, id) {
        this.chunkWriters.push({ stream: source, id });
    }
}
exports.default = HTMLWriter;
function handleAsset(type, asset) {
    if (typeof asset === 'string') {
        asset = { type: 'path', path: asset };
    }
    let content;
    if (asset.type === 'path') {
        content = fs_1.default.readFileSync(require.resolve(asset.path), 'utf8');
    }
    else if (asset.type === 'raw') {
        content = asset.content;
    }
    else if (asset.type === 'cjs') {
        content = fs_1.default.readFileSync(require.resolve(asset.path), 'utf8');
        content = `
    window['${asset.name}'] = (() => {
      const exports = {};
      const module = { exports };
      ((module, exports) => {
        ${content}
      })(module, exports);
      return module.exports;
    })();
    `;
    }
    else {
        throw new Error('Unknown type');
    }
    return `<${type}>${content}</${type}>`;
}
function writeHeader(stream, options) {
    var _a, _b, _c, _d;
    stream.write(`<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <style>
      html, body {
        padding: 0;
        margin: 0;
        height: 100%;
        border: none;
        -webkit-text-size-adjust: 100%;
        font-family: Helvetica, sans-serif;
      }
      
      #loading {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        width: 100%;
        height: 100%;
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -webkit-box-pack: center;
        -ms-flex-pack: center;
        justify-content: center;
      }
      
      .wrapper {
        position: relative;
        top: 20%;
        width: 10vw;
        height: 10vw;
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -webkit-box-orient: vertical;
        -webkit-box-direction: normal;
        -ms-flex-direction: column;
        flex-direction: column;
        -webkit-box-align: center;
        -ms-flex-align: center;
        align-items: center;
      }
      
      .logo > svg {
        width: 100%;
        height: 100%;
      }
      
      #stage {
        font-size: 16px;
        margin-top: 20px;
      }
    </style>
  </head>
  <body>
    <div id="loading">
      <div class="wrapper">
        <div class="logo">
          <svg width="144" height="144" viewBox="0 0 144 144" fill="none" xmlns="http://www.w3.org/2000/svg"><mask id="a" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="0" y="0" width="144" height="144"><circle cx="72" cy="72" r="72" fill="#fff"/></mask><g mask="url(#a)"><path d="M144 0H0v144h144V0Z" fill="#10255F"/><rect x="-67.999" y="-92" width="232" height="48" rx="24" transform="rotate(30 -68 -92)" fill="#4581B7"/><rect x="-22.718" y="-10.43" width="232" height="48" rx="24" transform="rotate(30 -22.718 -10.43)" fill="#5491C7"/><rect x="39.885" y="81.139" width="232" height="48" rx="24" transform="rotate(30 39.885 81.14)" fill="#4581B7"/></g></svg>
        </div>
        <div id="stage">Loading...</div>
      </div>
    </div>
    ${(_c = (_b = [...((_a = options.scripts) !== null && _a !== void 0 ? _a : []), ...scriptsToInject]) === null || _b === void 0 ? void 0 : _b.map((item) => handleAsset('script', item)).join('\n')) !== null && _c !== void 0 ? _c : ''}
    <script>
      const stage = document.querySelector('#stage');
      
      function setStage(name, fn) {
        stage.textContent = \`\${name}...\`;
        requestAnimationFrame(() => {
          setTimeout(fn);
        });
      }
    
      function _makeJsonExtAPI() {
        const jsonExtData = new Object(null);
        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='.split('');
        const charIndex = chars.reduce(function(res, item, index){
          res[item] = index;
          return res;
        }, {});
        
        function decodeFromBase64(input) {
          input = input.replace(/[^a-zA-Z0-9\\+\\/]/g, '');
      
          const output = [];
          let len = input.length;
          let i = 0;
          let chr1;
          let chr2;
          let chr3;
          let enc1;
          let enc2;
          let enc3;
          let enc4;
      
          // decode
          while (i < len)
          {
            enc1 = charIndex[input.charAt(i++)];
            enc2 = charIndex[input.charAt(i++)];
            enc3 = charIndex[input.charAt(i++)];
            enc4 = charIndex[input.charAt(i++)];
      
            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;
      
            output.push(chr1, chr2, chr3);
          }
      
          if (enc3 == null || enc3 == 64) output.pop();
          if (enc4 == null || enc4 == 64) output.pop();
      
          return Uint8Array.from(output);
        }
      
        return {
          getData() {
            return jsonExtData;
          },
          pushChunk(id, chunk) {
            jsonExtData[id] = jsonExtData[id] || [];
            jsonExtData[id].push(chunk);
          },
          parse() {
            return Promise.all(
              Object.entries(jsonExtData).map(([id, chunks]) => {
                if (${JSON.stringify((_d = options.dataCompression) !== null && _d !== void 0 ? _d : true)} === false) {
                  return jsonExt.parseChunked(() => chunks).then((data) => ({ id, data }));
                }
                
                const inflator = new Pako.Inflate();
                
                for(const chunk of chunks) {
                  const decoded = decodeFromBase64(chunk);
                  inflator.push(decoded);
                }
                
                const data = JSONXL.decode(inflator.result);
                return { id, data };
              })
            );
          },
        };
      }
      
      const ${options.jsonExtAPIName} = _makeJsonExtAPI();
    </script>
`);
}
function writeFooter(stream, options) {
    stream.write(`
    <script>
      setStage('Parsing', () => {
        for (const element of document.querySelectorAll('script')) {
          if(element.dataset.id) {
            ${options.jsonExtAPIName}.pushChunk(element.dataset.id, element.innerText);
            // cleanup script-tags to free memory
            element.remove();
          }
        }
        
        const initFunction = ${options.init};
        
        ${options.jsonExtAPIName}.parse()
          .then(items => {
            setStage('Initialization', () => {
              initFunction(items);
              document.querySelector('#loading').remove();
            });
          });
      })
    </script>
  </body>
</html>
`);
}
//# sourceMappingURL=index.js.map