/// <reference types="node" />
declare function Ot(e?: number): {
    ensureCapacity: (s: any) => void;
    reset: () => void;
    emit(): Buffer;
    readonly written: any;
    writeBytes(s: any): void;
    writeString(s: any): void;
    writeUint8(s: any): void;
    writeInt8(s: any): void;
    writeUint16(s: any): void;
    writeInt16(s: any): void;
    writeUint24(s: any): void;
    writeInt24(s: any): void;
    writeUint32(s: any): void;
    writeInt32(s: any): void;
    writeUint64(s: any): void;
    writeFloat32(s: any): void;
    writeFloat64(s: any): void;
};
declare var Nt: {
    new (t: any): {
        emit(): Buffer;
        writeString(t: any): void;
        writeObjectEntryKey(t: any, n: any, c: any): void;
        writeObjectEntriesEnd(t: any): void;
        writeTypeIndex(t: any, n: any, c: any): void;
        writeArrayLength(t: any): void;
        writeArrayHeader(t: any, n: any, c: any, _: any, o: any): void;
        vlqBytesNeeded(t: any): number;
        writeVlq(t: any): void;
        writeUintVar(t: any): void;
        writeIntVar(t: any): void;
        writeNumber(t: any, n: any): void;
    };
};
declare function Re(e: any, t?: {}): Buffer;
declare function Se(e: any): any;
export { Nt as Writer, Ot as createWriterBackend, Se as decode, Re as encode };
