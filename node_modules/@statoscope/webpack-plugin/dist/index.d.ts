/// <reference types="node" />
import { Readable } from 'stream';
import { Compilation, Compiler } from 'webpack';
import { CompressFunction } from '@statoscope/stats-extension-compressed/dist/generator';
import { Report } from '@statoscope/types/types/custom-report';
import { StatsExtensionWebpackAdapter } from '@statoscope/webpack-model';
export declare const STATOSCOPE_STAGE_COMPILER_DONE = 5000;
export type Options = {
    name?: string;
    saveReportTo?: string;
    saveTo?: string;
    saveStatsTo?: string;
    normalizeStats?: boolean;
    saveOnlyStats: boolean;
    disableReportCompression?: boolean;
    additionalStats: string[];
    statsOptions?: Record<string, unknown>;
    watchMode: boolean;
    open: false | 'dir' | 'file';
    compressor: false | 'gzip' | CompressFunction;
    reports?: Report<unknown, unknown>[];
    extensions: StatsExtensionWebpackAdapter<unknown>[];
};
export default class StatoscopeWebpackPlugin {
    options: Options;
    extensions: StatsExtensionWebpackAdapter<unknown>[];
    constructor(options?: Partial<Options>);
    interpolate(string: string, compilation: Compilation, customName?: string): string;
    apply(compiler: Compiler): void;
    getStatsForHTMLReport(mainStats: {
        filename?: string;
        stream: Readable;
    }): Array<{
        filename: string;
        stream: Readable;
    }>;
    makeReport(outputPath: string, stats: Array<{
        filename: string;
        stream: Readable;
    }>): Promise<string> | {
        writer: null;
        stream: null;
    };
    getHTMLReportPath(): string;
}
