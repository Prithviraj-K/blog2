"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareWithJora = void 0;
const path_1 = __importDefault(require("path"));
// @ts-ignore
const jora_1 = __importDefault(require("jora"));
const diff_1 = __importDefault(require("semver/functions/diff"));
const gt_1 = __importDefault(require("semver/functions/gt"));
const gte_1 = __importDefault(require("semver/functions/gte"));
const lt_1 = __importDefault(require("semver/functions/lt"));
const lte_1 = __importDefault(require("semver/functions/lte"));
const eq_1 = __importDefault(require("semver/functions/eq"));
const parse_1 = __importDefault(require("semver/functions/parse"));
const satisfies_1 = __importDefault(require("semver/functions/satisfies"));
const network_type_list_1 = __importStar(require("../network-type-list"));
const colors_1 = require("./colors");
const plural_1 = require("./plural");
const identityFn = (arg) => arg;
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/explicit-function-return-type
function helpers() {
    const helpers = {
        stringify: JSON.stringify,
        typeof(value) {
            return typeof value;
        },
        isNullish(value) {
            return value == null;
        },
        isArray(value) {
            return Array.isArray(value);
        },
        useNotNullish(values) {
            for (const value of values) {
                if (value != null) {
                    return value;
                }
            }
            return null;
        },
        serializeStringOrRegexp(value) {
            if (value == null) {
                return null;
            }
            if (value instanceof RegExp) {
                return { type: 'regexp', content: value.source, flags: value.flags };
            }
            return { type: 'string', content: value };
        },
        deserializeStringOrRegexp(value) {
            if (value == null) {
                return null;
            }
            if (value.type === 'regexp') {
                return new RegExp(value.content, value.flags);
            }
            return value.content;
        },
        toNumber(str) {
            return parseInt(str, 10);
        },
        formatSize(value) {
            const sign = Math.sign(value);
            value = Math.abs(value);
            if (isFinite(value)) {
                if (value < 1000 * 1000) {
                    return (sign * (value / 1024)).toFixed(2) + ' kb';
                }
                return (sign * (value / 1024 / 1024)).toFixed(2) + ' mb';
            }
            return 'n/a';
        },
        formatDate(ts, locale, options) {
            return new Date(ts).toLocaleString(locale, options);
        },
        formatDuration(ms) {
            const sign = Math.sign(ms);
            ms = Math.abs(ms);
            if (isFinite(ms)) {
                if (ms < 1000) {
                    return (sign * ms).toFixed(0) + ' ms';
                }
                return (sign * (ms / 1000)).toFixed(1) + ' sec';
            }
            return 'n/a';
        },
        percentFrom(a, b, toFixed) {
            if (a && !b) {
                return 100;
            }
            if (!a && !b) {
                return 0;
            }
            const p = (a / b - 1) * 100;
            if (typeof toFixed !== 'undefined') {
                return Number(p.toFixed(toFixed));
            }
            return p;
        },
        toFixed(value, digits = 2) {
            return value.toFixed(digits);
        },
        color: (value) => colors_1.colorMap[value] ? colors_1.colorMap[value].color : (0, colors_1.generateColor)(value),
        fileExt: (value) => {
            if (value == null) {
                return '';
            }
            return path_1.default.extname(value);
        },
        fileType: (value) => {
            if (value == null) {
                return '';
            }
            const extname = path_1.default.extname(value);
            return colors_1.fileTypeMap[extname] || extname;
        },
        toMatchRegexp: (value, rx) => rx.test(value),
        toRegexp: (value) => new RegExp(`(${value})`),
        colorFromH: colors_1.colorFromH,
        plural(value, words) {
            return plural_1.pluralEng.plural(value, words);
        },
        pluralWithValue(value, words) {
            return plural_1.pluralEng.pluralWithValue(value, words);
        },
        pluralRus(value, words) {
            return plural_1.pluralRus.plural(value, words);
        },
        pluralWithValueRus(value, words) {
            return plural_1.pluralRus.pluralWithValue(value, words);
        },
        getNetworkTypeInfo(networkType) {
            var _a;
            return (_a = network_type_list_1.default.find((item) => item.name === networkType)) !== null && _a !== void 0 ? _a : null;
        },
        getNetworkTypeName(networkType) {
            return `${networkType.type}: ${networkType.name} (${parseFloat((networkType.typicalSpeed / network_type_list_1.bytesInMBit).toFixed(1))} MBit/s)`;
        },
        getDownloadTime(size, networkType) {
            const item = network_type_list_1.default.find((item) => item.name === networkType);
            if (item) {
                return (size / item.typicalSpeed) * 1000;
            }
            throw new Error(`Unknown network type ${networkType}`);
        },
        semverGT(a, b) {
            return (0, gt_1.default)(a, b);
        },
        semverGTE(a, b) {
            return (0, gte_1.default)(a, b);
        },
        semverLT(a, b) {
            return (0, lt_1.default)(a, b);
        },
        semverLTE(a, b) {
            return (0, lte_1.default)(a, b);
        },
        semverEQ(a, b) {
            return (0, eq_1.default)(a, b);
        },
        semverDiff(a, b) {
            return (0, diff_1.default)(a, b);
        },
        semverParse(version) {
            return (0, parse_1.default)(version);
        },
        semverSatisfies(version, range) {
            return (0, satisfies_1.default)(version, range);
        },
        formatDiff(value) {
            var _a;
            if (value.type === 'size') {
                return helpers.formatSize(value.b - value.a);
            }
            if (value.type === 'time') {
                return helpers.formatDuration(value.b - value.a);
            }
            if (value.type === 'version') {
                const diff = (0, diff_1.default)(value.a, value.b);
                const type = (0, gt_1.default)(value.a, value.b) ? 'downgrade' : 'upgrade';
                return diff ? `${diff} ${type} from ${value.a}` : '';
            }
            if ((_a = value.plural) === null || _a === void 0 ? void 0 : _a.words) {
                return helpers.pluralWithValue(value.b - value.a, value.plural.words);
            }
            return (value.b - value.a).toString();
        },
        isMatch(a, b) {
            if (!a || !b) {
                return a === b;
            }
            return b instanceof RegExp ? b.test(a) : a === b;
        },
        exclude(items, params) {
            return items.filter((item) => {
                var _a, _b;
                for (const excludeItem of (_a = params === null || params === void 0 ? void 0 : params.exclude) !== null && _a !== void 0 ? _a : []) {
                    const getter = (_b = params === null || params === void 0 ? void 0 : params.get) !== null && _b !== void 0 ? _b : identityFn;
                    const value = getter(item);
                    if (this.isMatch(value, excludeItem)) {
                        return false;
                    }
                }
                return true;
            });
        },
        graph_getNode(id, graph) {
            var _a;
            return (_a = graph === null || graph === void 0 ? void 0 : graph.getNode(id)) !== null && _a !== void 0 ? _a : null;
        },
        graph_getPaths(from, graph, to, max = Infinity) {
            if (!from || !to || !graph) {
                return null;
            }
            return graph.findPaths(from, to, max);
        },
        diff_normalizeLimit(limit) {
            return typeof limit === 'number'
                ? { type: 'absolute', number: limit }
                : limit !== null && limit !== void 0 ? limit : null;
        },
        diff_isLTETheLimit(valueDiff, limit) {
            const normalizedLimit = this.diff_normalizeLimit(limit);
            return (!normalizedLimit ||
                (normalizedLimit.type === 'absolute'
                    ? valueDiff.absolute <= normalizedLimit.number
                    : valueDiff.percent <= normalizedLimit.number));
        },
    };
    return helpers;
}
exports.default = helpers;
function prepareWithJora(input, options = {}) {
    const j = jora_1.default.setup({
        methods: {
            ...helpers(),
            ...options.helpers,
        },
    });
    const rootContext = {};
    return {
        query: (query, data = input, context = rootContext) => j(query)(data || input, context),
    };
}
exports.prepareWithJora = prepareWithJora;
//# sourceMappingURL=index.js.map