"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sameId = void 0;
const entity_resolver_1 = require("./entity-resolver");
function sameId(id) {
    return id;
}
exports.sameId = sameId;
function makeIdModifier(modifier = sameId) {
    const cache = new Map();
    return (id) => {
        let cached = cache.get(id);
        if (cached == null) {
            cached = modifier(id);
            cache.set(id, cached);
        }
        return cached;
    };
}
function makeIndex(getId, source, options) {
    const idModifier = makeIdModifier(options === null || options === void 0 ? void 0 : options.idModifier);
    const wrappedGet = (0, entity_resolver_1.getIdWrapper)(getId, idModifier);
    const storage = new Map();
    const api = {
        add(entity) {
            storage.set(wrappedGet(entity), entity);
        },
        has(entity) {
            return storage.has(wrappedGet(entity));
        },
        hasId(id) {
            return storage.has((0, entity_resolver_1.normalizeId)(idModifier(id)));
        },
        get(id) {
            var _a;
            return (_a = storage.get((0, entity_resolver_1.normalizeId)(idModifier(id)))) !== null && _a !== void 0 ? _a : null;
        },
        getAll() {
            return [...storage.values()];
        },
        remove(entity) {
            storage.delete(wrappedGet(entity));
        },
        removeById(id) {
            storage.delete((0, entity_resolver_1.normalizeId)(idModifier(id)));
        },
    };
    for (const item of source !== null && source !== void 0 ? source : []) {
        api.add(item);
    }
    return api;
}
exports.default = makeIndex;
//# sourceMappingURL=indexer.js.map