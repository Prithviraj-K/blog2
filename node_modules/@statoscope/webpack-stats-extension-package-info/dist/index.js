"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const generator_1 = __importDefault(require("@statoscope/stats-extension-package-info/dist/generator"));
// eslint-disable-next-line @typescript-eslint/no-var-requires
const { author, homepage, name, version, description } = require('../package.json');
const pluginName = `${name}@${version}`;
class WebpackCompressedExtension {
    constructor() {
        this.descriptor = { name, version, author, homepage, description };
        this.generator = new generator_1.default(this.descriptor);
    }
    getExtension() {
        return this.generator.get();
    }
    handleCompiler(compiler, context) {
        var _a, _b;
        // @ts-ignore
        context !== null && context !== void 0 ? context : (context = (_b = (_a = compiler.options.stats) === null || _a === void 0 ? void 0 : _a.context) !== null && _b !== void 0 ? _b : compiler.context);
        compiler.hooks.compilation.tap(pluginName, (compilation) => {
            compilation.resolverFactory.hooks.resolver.intercept({
                // @ts-ignore
                factory(key, hook) {
                    hook.tap('MyPlugin', (resolver) => {
                        resolver.hooks.result.tap('MyPlugin', handleResolverResult);
                    });
                    return hook;
                },
            });
        });
        const handleResolverResult = (result) => {
            const pkg = result.descriptionFileData;
            if (pkg && result.descriptionFileRoot) {
                const instancePath = path_1.default.relative(context, result.descriptionFileRoot);
                const item = {
                    packageName: pkg.name,
                    instancePath,
                    info: { version: pkg.version },
                };
                this.generator.handleInstance(null, item.packageName, item.instancePath, item.info);
                // webpack 4 uses absolute path for some modules
                // @ts-ignore
                const compilation = compiler._lastCompilation || {};
                if (!compilation.chunkGraph && instancePath.match(/^\.\./)) {
                    const item = {
                        packageName: pkg.name,
                        instancePath: result.descriptionFileRoot,
                        info: { version: pkg.version },
                    };
                    this.generator.handleInstance(null, item.packageName, item.instancePath, item.info);
                }
            }
            return result;
        };
        compiler.resolverFactory.hooks.resolver.intercept({
            // @ts-ignore
            factory(key, hook) {
                hook.tap('MyPlugin', (resolver) => {
                    resolver.hooks.result.tap('MyPlugin', handleResolverResult);
                });
                return hook;
            },
        });
    }
}
exports.default = WebpackCompressedExtension;
//# sourceMappingURL=index.js.map