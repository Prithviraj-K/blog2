"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const entity_resolver_1 = __importDefault(require("@statoscope/helpers/dist/entity-resolver"));
const module_1 = require("./module");
const modules_to_foam_tree_1 = __importDefault(require("./modules-to-foam-tree"));
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/explicit-function-return-type
function default_1(normalizeResult, context) {
    const compilations = normalizeResult.compilations;
    const resolveCompilation = (0, entity_resolver_1.default)(compilations, (item) => { var _a; return (_a = item === null || item === void 0 ? void 0 : item.data) === null || _a === void 0 ? void 0 : _a.hash; });
    const resolveFile = (0, entity_resolver_1.default)(compilations.map((c) => c.file), (item) => item.name);
    const resolveExtension = (fileName, id) => {
        var _a, _b;
        return (_b = (_a = normalizeResult.resolvers.get(fileName)) === null || _a === void 0 ? void 0 : _a.resolveExtension(id)) !== null && _b !== void 0 ? _b : null;
    };
    const resolveExtensionByCompilation = (hash, id) => {
        var _a;
        const fileName = (_a = resolveCompilation(hash)) === null || _a === void 0 ? void 0 : _a.file.name;
        if (!fileName) {
            return null;
        }
        return resolveExtension(fileName, id);
    };
    return {
        moduleSize(module) {
            console.warn('moduleSize helper was deprecated. Use getModuleSize');
            return module.size;
        },
        chunkName(chunk) {
            var _a, _b;
            const chunkNames = [...chunk.names, ...((_a = chunk.idHints) !== null && _a !== void 0 ? _a : [])];
            return `${(_b = chunkNames[0]) !== null && _b !== void 0 ? _b : (chunk.name || chunk.id)}${chunk.reason ? ' [' + chunk.reason + ']' : ''}`;
        },
        assetChunkName(asset) {
            var _a, _b, _c;
            const chunkNames = [...((_a = asset.chunkNames) !== null && _a !== void 0 ? _a : []), ...((_b = asset.chunkIdHints) !== null && _b !== void 0 ? _b : [])];
            return (_c = chunkNames[0]) !== null && _c !== void 0 ? _c : null;
        },
        getTotalFilesSize: (asset, hash, compressed) => {
            const files = asset.files.length
                ? asset.files
                : [{ name: asset.name, size: asset.size }];
            if (!compressed) {
                return files.reduce((sum, file) => sum + file.size, 0);
            }
            if (!hash) {
                throw new Error('[getTotalFilesSize]: hash-parameter is required');
            }
            const ext = resolveExtensionByCompilation(hash, '@statoscope/stats-extension-compressed');
            const resolverSize = ext === null || ext === void 0 ? void 0 : ext.api;
            return files
                .map((f) => { var _a; return (_a = resolverSize === null || resolverSize === void 0 ? void 0 : resolverSize(hash, f.name)) !== null && _a !== void 0 ? _a : null; })
                .reduce((sum, file) => { var _a; return sum + ((_a = file === null || file === void 0 ? void 0 : file.size) !== null && _a !== void 0 ? _a : 0); }, 0);
        },
        resolveCompilationByAsset(asset, fileName) {
            var _a, _b;
            return ((_b = (_a = normalizeResult.resolvers.get(fileName)) === null || _a === void 0 ? void 0 : _a.resolveCompilationByAsset(asset)) !== null && _b !== void 0 ? _b : null);
        },
        resolveCompilationByChunk(chunk, fileName) {
            var _a, _b;
            return ((_b = (_a = normalizeResult.resolvers.get(fileName)) === null || _a === void 0 ? void 0 : _a.resolveCompilationByChunk(chunk)) !== null && _b !== void 0 ? _b : null);
        },
        resolveCompilationByModule(module, fileName) {
            var _a, _b;
            return ((_b = (_a = normalizeResult.resolvers.get(fileName)) === null || _a === void 0 ? void 0 : _a.resolveCompilationByModule(module)) !== null && _b !== void 0 ? _b : null);
        },
        resolveCompilationByEntrypoint(entrypoint, fileName) {
            var _a, _b;
            return ((_b = (_a = normalizeResult.resolvers
                .get(fileName)) === null || _a === void 0 ? void 0 : _a.resolveCompilationByEntrypoint(entrypoint)) !== null && _b !== void 0 ? _b : null);
        },
        resolveChunk(id, compilationHash) {
            var _a;
            return ((_a = resolveCompilation(compilationHash)) === null || _a === void 0 ? void 0 : _a.resolvers.resolveChunk(id)) || null;
        },
        resolveAsset(id, compilationHash) {
            var _a;
            return ((_a = resolveCompilation(compilationHash)) === null || _a === void 0 ? void 0 : _a.resolvers.resolveAsset(id)) || null;
        },
        resolveModule(id, compilationHash) {
            var _a;
            return ((_a = resolveCompilation(compilationHash)) === null || _a === void 0 ? void 0 : _a.resolvers.resolveModule(id)) || null;
        },
        resolvePackage(id, compilationHash) {
            var _a;
            return ((_a = resolveCompilation(compilationHash)) === null || _a === void 0 ? void 0 : _a.resolvers.resolvePackage(id)) || null;
        },
        resolveEntrypoint(id, compilationHash) {
            var _a;
            return ((_a = resolveCompilation(compilationHash)) === null || _a === void 0 ? void 0 : _a.resolvers.resolveEntrypoint(id)) || null;
        },
        resolveFile(id) {
            return resolveFile(id);
        },
        resolveInputFile() {
            return this.resolveFile('input.json');
        },
        resolveReferenceFile() {
            return this.resolveFile('reference.json');
        },
        resolveStat(id) {
            const resolved = resolveCompilation(id);
            return (resolved && { file: resolved === null || resolved === void 0 ? void 0 : resolved.file, compilation: resolved === null || resolved === void 0 ? void 0 : resolved.data }) || null;
        },
        resolveCompilation(id) {
            const resolved = resolveCompilation(id);
            return (resolved && (resolved === null || resolved === void 0 ? void 0 : resolved.data)) || null;
        },
        resolveExtension(id, fileName) {
            return resolveExtension(fileName, id);
        },
        resolveExtensionByCompilation(id, hash) {
            return resolveExtensionByCompilation(hash, id);
        },
        getModuleSize(module, hash, compressed) {
            var _a;
            if (!compressed) {
                return { size: module.size };
            }
            if (!hash) {
                throw new Error('[getModuleSize]: hash-parameter is required');
            }
            const ext = resolveExtensionByCompilation(hash, '@statoscope/stats-extension-compressed');
            const resolverSize = ext === null || ext === void 0 ? void 0 : ext.api;
            return ((_a = resolverSize === null || resolverSize === void 0 ? void 0 : resolverSize(hash, module.identifier)) !== null && _a !== void 0 ? _a : {
                size: module.size,
            });
        },
        getAssetSize(asset, hash, compressed) {
            var _a;
            if (!compressed) {
                return { size: asset.size };
            }
            if (!hash) {
                throw new Error('[getAssetSize]: hash-parameter is required');
            }
            const ext = resolveExtensionByCompilation(hash, '@statoscope/stats-extension-compressed');
            const resolverSize = ext === null || ext === void 0 ? void 0 : ext.api;
            return ((_a = resolverSize === null || resolverSize === void 0 ? void 0 : resolverSize(hash, asset.name)) !== null && _a !== void 0 ? _a : {
                size: asset.size,
            });
        },
        getPackageInstanceInfo(packageName, instancePath, hash) {
            var _a;
            if (!hash) {
                throw new Error('[getPackageInstanceInfo]: hash-parameter is required');
            }
            const ext = resolveExtensionByCompilation(hash, '@statoscope/stats-extension-package-info');
            const api = ext === null || ext === void 0 ? void 0 : ext.api;
            return (_a = api === null || api === void 0 ? void 0 : api.getInstance(hash, packageName, instancePath)) !== null && _a !== void 0 ? _a : null;
        },
        moduleResource: module_1.moduleResource,
        moduleReasonResource: module_1.moduleReasonResource,
        moduleNameResource: module_1.moduleNameResource,
        nodeModule: module_1.nodeModule,
        statName(stat) {
            if (!stat) {
                return 'unknown';
            }
            const hash = stat.compilation.hash.slice(0, 7);
            const compilationName = stat.compilation.name && (0, module_1.moduleNameResource)(stat.compilation.name);
            if (stat.file.name) {
                return `${stat.file.name} (${compilationName || hash})`;
            }
            else if (compilationName) {
                return `${compilationName} (${hash})`;
            }
            return hash;
        },
        getModuleGraph(hash) {
            var _a, _b;
            return (_b = (_a = resolveCompilation(hash)) === null || _a === void 0 ? void 0 : _a.graph.module) !== null && _b !== void 0 ? _b : null;
        },
        moduleGraph_getEntrypoints(module, graph, entrypoints, max = Infinity) {
            if (!module || !graph || !entrypoints) {
                return [];
            }
            const moduleNode = graph.getNode(module.identifier);
            if (!moduleNode) {
                return [];
            }
            let total = 0;
            return entrypoints.filter(
            // @ts-ignore
            (entry) => {
                var _a;
                if (total === max) {
                    return false;
                }
                const entryModuleId = (_a = entry.data.dep) === null || _a === void 0 ? void 0 : _a.module.identifier;
                const entryModule = graph.getNode(entryModuleId);
                if (entryModule) {
                    if (moduleNode === entryModule) {
                        total++;
                        return true;
                    }
                    const solution = graph.findPaths(moduleNode, entryModule, 1);
                    if (solution.children.length) {
                        total++;
                        return true;
                    }
                }
                return false;
            });
        },
        moduleGraph_getPaths(from, graph, to, max = Infinity) {
            if (!from || !to || !graph) {
                return null;
            }
            const fromNode = graph.getNode(from.identifier);
            const toNode = graph.getNode(to.identifier);
            if (!fromNode || !toNode) {
                return null;
            }
            return graph.findPaths(fromNode, toNode, max);
        },
        modulesToFoamTree(modules, hash, compressed) {
            if (compressed && !hash) {
                throw new Error('[modulesToFoamTree]: hash-parameter is required');
            }
            return (0, modules_to_foam_tree_1.default)(modules, (module) => {
                if (compressed && hash) {
                    return this.getModuleSize(module, hash, compressed);
                }
                return { size: module.size };
            });
        },
        validation_getItems(hash, relatedType, relatedId) {
            var _a, _b;
            if (!hash) {
                throw new Error('[validation_getItems]: hash-parameter is required');
            }
            const ext = resolveExtensionByCompilation(hash, '@statoscope/stats-extension-stats-validation-result');
            const api = ext === null || ext === void 0 ? void 0 : ext.api;
            return [
                ...((_a = api === null || api === void 0 ? void 0 : api.getItems(null, relatedType, relatedId)) !== null && _a !== void 0 ? _a : []),
                ...((_b = api === null || api === void 0 ? void 0 : api.getItems(hash, relatedType, relatedId)) !== null && _b !== void 0 ? _b : []),
            ];
        },
        validation_getItem(id, hash) {
            var _a;
            if (!hash) {
                throw new Error('[validation_getItem]: hash-parameter is required');
            }
            if (id == null) {
                throw new Error('[validation_getItem]: id-parameter is required');
            }
            const ext = resolveExtensionByCompilation(hash, '@statoscope/stats-extension-stats-validation-result');
            const api = ext === null || ext === void 0 ? void 0 : ext.api;
            return (_a = api === null || api === void 0 ? void 0 : api.getItemById(id)) !== null && _a !== void 0 ? _a : null;
        },
        validation_resolveRelatedItem(item, hash) {
            var _a, _b, _c;
            if (!item) {
                throw new Error('[validation_resolveRelatedItem]: item-parameter is required');
            }
            if (!hash) {
                throw new Error('[validation_resolveRelatedItem]: hash-parameter is required');
            }
            const compilation = resolveCompilation(hash);
            if (!compilation) {
                throw new Error("[validation_resolveRelatedItem]: can't resolve compilation");
            }
            if (item.type === 'package') {
                return { type: item.type, item: compilation.resolvers.resolvePackage(item.id) };
            }
            if (item.type === 'package-instance') {
                const instance = (0, module_1.nodeModule)(item.id);
                const thePackage = compilation.resolvers.resolvePackage(instance.name);
                const theInstance = (_a = thePackage === null || thePackage === void 0 ? void 0 : thePackage.instances.find((item) => item.path === instance.path)) !== null && _a !== void 0 ? _a : null;
                return { type: item.type, item: theInstance };
            }
            if (item.type === 'module') {
                return { type: item.type, item: compilation.resolvers.resolveModule(item.id) };
            }
            if (item.type === 'entry') {
                return {
                    type: item.type,
                    item: compilation.resolvers.resolveEntrypoint(item.id),
                };
            }
            if (item.type === 'chunk') {
                return {
                    type: item.type,
                    item: compilation.resolvers.resolveChunk(item.id),
                };
            }
            if (item.type === 'compilation') {
                return {
                    type: item.type,
                    item: (_c = (_b = resolveCompilation(item.id)) === null || _b === void 0 ? void 0 : _b.data) !== null && _c !== void 0 ? _c : null,
                };
            }
            return {
                type: item.type,
                item: compilation.resolvers.resolveAsset(item.id),
            };
        },
        validation_resolveRule(name, hash) {
            var _a;
            if (!hash) {
                throw new Error('[validation_resolveRule]: hash-parameter is required');
            }
            if (name == null) {
                throw new Error('[validation_resolveRule]: name-parameter is required');
            }
            const ext = resolveExtensionByCompilation(hash, '@statoscope/stats-extension-stats-validation-result');
            const api = ext === null || ext === void 0 ? void 0 : ext.api;
            return (_a = api === null || api === void 0 ? void 0 : api.getRule(name)) !== null && _a !== void 0 ? _a : null;
        },
        customReports_getItems(file, hash, relatedType, relatedId) {
            var _a, _b, _c;
            if (!file) {
                throw new Error('[customReports_getItems]: file-parameter is required');
            }
            const ext = (_a = normalizeResult.resolvers
                .get(file)) === null || _a === void 0 ? void 0 : _a.resolveExtension('@statoscope/stats-extension-custom-reports');
            const api = ext === null || ext === void 0 ? void 0 : ext.api;
            return [
                ...((_b = api === null || api === void 0 ? void 0 : api.getReports(null, relatedType, relatedId)) !== null && _b !== void 0 ? _b : []),
                ...((_c = api === null || api === void 0 ? void 0 : api.getReports(hash, relatedType, relatedId)) !== null && _c !== void 0 ? _c : []),
            ];
        },
        customReports_getItem(id, file) {
            var _a, _b;
            if (!file) {
                throw new Error('[customReports_getItem]: file-parameter is required');
            }
            if (id == null) {
                throw new Error('[customReports_getItem]: id-parameter is required');
            }
            const ext = (_a = normalizeResult.resolvers
                .get(file)) === null || _a === void 0 ? void 0 : _a.resolveExtension('@statoscope/stats-extension-custom-reports');
            const api = ext === null || ext === void 0 ? void 0 : ext.api;
            return (_b = api === null || api === void 0 ? void 0 : api.getById(id)) !== null && _b !== void 0 ? _b : null;
        },
        asset_getSize(asset, hash, useCompressedSize) {
            return this.getAssetSize(asset, hash, useCompressedSize);
        },
        assets_getTotalSize(assets, hash, useCompressedSize) {
            return context.query(`
        $hash: #.hash;
        $useCompressedSize: #.useCompressedSize;
        .[not name.shouldExcludeResource()].[]
        .(asset_getSize($hash, $useCompressedSize)) |
        $ ? .reduce(=> {
          $current: $;
          $all: $$;
          size: $all.size + $current.size,
          compressor: $all.compressor = $current.compressor ? $all.compressor : 'multiple'
        }) : {size: 0}`, assets, { useCompressedSize, hash });
        },
        entrypoint_getChunks(entrypoint) {
            return context.query(`data.chunks + data.chunks..children`, entrypoint);
        },
        entrypoint_getInitialChunks(entrypoint) {
            return this.entrypoint_getChunks(entrypoint).filter((chunk) => chunk.initial);
        },
        entrypoint_getInitialSize(entrypoint, hash, useCompressedSize) {
            return this.assets_getTotalSize(this.entrypoint_getInitialAssets(entrypoint), hash, useCompressedSize);
        },
        entrypoint_getAsyncChunks(entrypoint) {
            return this.entrypoint_getChunks(entrypoint).filter((chunk) => !chunk.initial);
        },
        entrypoint_getAsyncSize(entrypoint, hash, useCompressedSize) {
            return this.assets_getTotalSize(this.entrypoint_getAsyncAssets(entrypoint), hash, useCompressedSize);
        },
        entrypoint_getAssets(entrypoint) {
            return context.query(`(data.chunks + data.chunks..children).files`, entrypoint);
        },
        entrypoint_getInitialAssets(entrypoint) {
            return context.query(`(data.chunks + data.chunks..children).[initial].files`, entrypoint);
        },
        entrypoint_getAsyncAssets(entrypoint) {
            return context.query(`(data.chunks + data.chunks..children).[not initial].files`, entrypoint);
        },
        // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
        module_retained_modules: (() => {
            const cache = new WeakMap();
            return (module) => {
                var _a;
                if (!module) {
                    return [];
                }
                const cached = cache.get(module);
                if (cached) {
                    return [...cached];
                }
                const passed = new Set();
                const stack = [module];
                let cursor;
                while ((cursor = stack.pop())) {
                    if (passed.has(cursor)) {
                        continue;
                    }
                    if (cursor !== module &&
                        cursor.reasons.some((r) => r.resolvedModule &&
                            r.resolvedModule !== module &&
                            !passed.has(r.resolvedModule))) {
                        continue;
                    }
                    passed.add(cursor);
                    for (const dep of (_a = cursor.deps) !== null && _a !== void 0 ? _a : []) {
                        if (dep.module) {
                            stack.push(dep.module);
                        }
                    }
                }
                passed.delete(module);
                cache.set(module, passed);
                return [...passed];
            };
        })(),
    };
}
exports.default = default_1;
//# sourceMappingURL=jora-helpers.js.map