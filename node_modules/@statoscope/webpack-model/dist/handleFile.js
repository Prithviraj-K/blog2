"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleRawFile = void 0;
const extensions_1 = __importDefault(require("@statoscope/extensions"));
const api_1 = __importDefault(require("@statoscope/stats-extension-compressed/dist/api"));
const package_json_1 = __importDefault(require("@statoscope/stats-extension-compressed/package.json"));
const api_2 = __importDefault(require("@statoscope/stats-extension-package-info/dist/api"));
const package_json_2 = __importDefault(require("@statoscope/stats-extension-package-info/package.json"));
const package_json_3 = __importDefault(require("@statoscope/stats-extension-stats-validation-result/package.json"));
const api_3 = __importDefault(require("@statoscope/stats-extension-stats-validation-result/dist/api"));
const package_json_4 = __importDefault(require("@statoscope/stats-extension-custom-reports/package.json"));
const api_4 = __importDefault(require("@statoscope/stats-extension-custom-reports/dist/api"));
const indexer_1 = __importDefault(require("@statoscope/helpers/dist/indexer"));
const handleCompilation_1 = __importDefault(require("./handleCompilation"));
const denormalizeCompilation_1 = __importDefault(require("./denormalizeCompilation"));
// todo: make it injectable
const extensionContainer = new extensions_1.default();
extensionContainer.register(package_json_1.default.name, package_json_1.default.version, api_1.default);
extensionContainer.register(package_json_2.default.name, package_json_2.default.version, api_2.default);
extensionContainer.register(package_json_3.default.name, package_json_3.default.version, api_3.default);
extensionContainer.register(package_json_4.default.name, package_json_4.default.version, api_4.default);
function handleFile(rawData) {
    const files = [];
    const compilations = [];
    const fileIndexes = new Map();
    const fileResolvers = new Map();
    if (!Array.isArray(rawData)) {
        rawData = [rawData];
    }
    for (const rawFile of rawData) {
        const handledFile = handleRawFile(rawFile);
        files.push(handledFile.file);
        compilations.push(...handledFile.compilations);
        fileIndexes.set(rawFile.name, handledFile.indexes);
        fileResolvers.set(rawFile.name, handledFile.resolvers);
    }
    return { files, compilations, indexes: fileIndexes, resolvers: fileResolvers };
}
exports.default = handleFile;
function handleRawFile(rawStatsFileDescriptor) {
    var _a, _b, _c;
    (0, denormalizeCompilation_1.default)(rawStatsFileDescriptor.data);
    const file = {
        name: rawStatsFileDescriptor.name,
        version: rawStatsFileDescriptor.data.version || 'unknown',
        compilations: [],
        __statoscope: rawStatsFileDescriptor.data.__statoscope,
    };
    const extensions = (_c = (_b = (_a = file.__statoscope) === null || _a === void 0 ? void 0 : _a.extensions) === null || _b === void 0 ? void 0 : _b.map((ext) => {
        const item = extensionContainer.resolve(ext.descriptor.name);
        if (!item) {
            return {
                data: ext,
                api: null,
            };
        }
        return {
            data: ext,
            api: item.apiFactory(ext),
        };
    })) !== null && _c !== void 0 ? _c : [];
    const indexes = {
        extensions: (0, indexer_1.default)((ext) => ext.data.descriptor.name, extensions),
        compilation: {
            byAsset: new WeakMap(),
            byChunks: new WeakMap(),
            byModule: new WeakMap(),
            byEntrypoint: new WeakMap(),
        },
    };
    const resolvers = {
        resolveExtension: (id) => indexes.extensions.get(id),
        resolveCompilationByAsset: (asset) => indexes.compilation.byAsset.get(asset),
        resolveCompilationByChunk: (chunk) => indexes.compilation.byChunks.get(chunk),
        resolveCompilationByModule: (module) => indexes.compilation.byModule.get(module),
        resolveCompilationByEntrypoint: (entrypoint) => indexes.compilation.byEntrypoint.get(entrypoint),
    };
    const compilations = (0, handleCompilation_1.default)(rawStatsFileDescriptor, file, {
        indexes,
        resolvers,
    });
    return {
        file,
        compilations,
        resolvers,
        indexes,
    };
}
exports.handleRawFile = handleRawFile;
//# sourceMappingURL=handleFile.js.map